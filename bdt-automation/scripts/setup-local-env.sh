#!/bin/bash

# Tanvi Vanity AI - Local Development Environment Setup
# BDT-P1: Complete one-click local development setup
# Usage: ./setup-local-env.sh

set -e  # Exit on any error

echo "🚀 Tanvi Vanity AI - Local Development Environment Setup"
echo "======================================================"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running from correct directory
if [ ! -f "BDT_STRATEGY_DOCUMENT.md" ]; then
    print_error "Please run this script from the tanvi_vanity_ai root directory"
    exit 1
fi

print_status "Starting local development environment setup..."

# 1. System Requirements Check
print_status "Checking system requirements..."

# Check Python
if ! command -v python3 &> /dev/null; then
    print_error "Python 3 is required but not installed"
    exit 1
fi
print_success "Python 3 found: $(python3 --version)"

# Check Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js is required but not installed"
    exit 1
fi
print_success "Node.js found: $(node --version)"

# Check npm
if ! command -v npm &> /dev/null; then
    print_error "npm is required but not installed"
    exit 1
fi
print_success "npm found: $(npm --version)"

# Check Git
if ! command -v git &> /dev/null; then
    print_error "Git is required but not installed"
    exit 1
fi
print_success "Git found: $(git --version)"

# 2. Create local environment configuration
print_status "Creating local environment configuration..."

# Create .env.local file
cat > .env.local << EOF
# Tanvi Vanity AI - Local Development Environment
# Generated by setup-local-env.sh

# Environment
NODE_ENV=development
FLASK_ENV=development
DEBUG=true

# Database
DATABASE_URL=sqlite:///local_tanvi.db
DB_HOST=localhost
DB_PORT=5432
DB_NAME=tanvi_local
DB_USER=tanvi_dev
DB_PASSWORD=dev_password

# API Configuration
API_BASE_URL=http://localhost:5000
FRONTEND_URL=http://localhost:3000

# Service Ports
WS1_PORT=5001  # User Management
WS2_PORT=5002  # AI Styling Engine
WS3_PORT=5003  # Computer Vision
WS4_PORT=5004  # Social Integration
WS5_PORT=5005  # E-commerce Integration
WS6_PORT=3000  # Mobile PWA

# JWT Configuration
JWT_SECRET_KEY=local_dev_secret_key_change_in_production
JWT_ACCESS_TOKEN_EXPIRES=3600

# AI/ML Configuration
AI_MODEL_PATH=./models
OPENAI_API_KEY=your_openai_api_key_here
COMPUTER_VISION_ENDPOINT=http://localhost:5003

# Payment Configuration (Test Mode)
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_key
STRIPE_SECRET_KEY=sk_test_your_stripe_key
RAZORPAY_KEY_ID=your_razorpay_key_id
RAZORPAY_KEY_SECRET=your_razorpay_secret

# Social Configuration
SOCIAL_MEDIA_API_KEY=your_social_api_key

# Logging
LOG_LEVEL=DEBUG
LOG_FILE=./logs/tanvi_local.log

# Redis (for caching)
REDIS_URL=redis://localhost:6379

# File Storage
UPLOAD_FOLDER=./uploads
MAX_CONTENT_LENGTH=16777216  # 16MB

EOF

print_success "Local environment configuration created (.env.local)"

# 3. Setup Backend Services (WS1-WS5)
print_status "Setting up backend services..."

# Create logs directory
mkdir -p logs uploads models

# Setup each workstream
for ws in ws1_user_management ws2_ai_styling_engine ws3_computer_vision_wardrobe ws4_social_integration ws5_ecommerce_integration; do
    print_status "Setting up $ws..."
    
    if [ -d "workstreams/$ws" ]; then
        cd "workstreams/$ws"
        
        # Find the service directory
        service_dir=$(find . -name "*_service" -type d | head -1)
        if [ -n "$service_dir" ]; then
            cd "$service_dir"
            
            # Create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
                print_status "Creating virtual environment for $ws..."
                python3 -m venv venv
            fi
            
            # Activate virtual environment and install dependencies
            source venv/bin/activate
            
            # Install common dependencies
            pip install --upgrade pip
            pip install flask flask-cors flask-sqlalchemy flask-jwt-extended python-dotenv requests
            
            # Install specific dependencies based on workstream
            case $ws in
                "ws2_ai_styling_engine")
                    pip install openai scikit-learn numpy pandas
                    ;;
                "ws3_computer_vision_wardrobe")
                    pip install opencv-python pillow tensorflow
                    ;;
                "ws5_ecommerce_integration")
                    pip install stripe razorpay
                    ;;
            esac
            
            # Create requirements.txt
            pip freeze > requirements.txt
            
            deactivate
            cd ../../..
            print_success "$ws setup complete"
        else
            print_warning "Service directory not found for $ws"
        fi
    else
        print_warning "Workstream directory not found: $ws"
    fi
done

# 4. Setup Frontend (WS6 Mobile PWA)
print_status "Setting up frontend application..."

if [ -d "workstreams/ws6_mobile_app/tanvi_mobile_app" ]; then
    cd "workstreams/ws6_mobile_app/tanvi_mobile_app"
    
    # Install npm dependencies
    print_status "Installing npm dependencies..."
    npm install
    
    # Create local environment file for frontend
    cat > .env.local << EOF
# Frontend Environment Variables
VITE_API_BASE_URL=http://localhost:5000
VITE_WS1_URL=http://localhost:5001
VITE_WS2_URL=http://localhost:5002
VITE_WS3_URL=http://localhost:5003
VITE_WS4_URL=http://localhost:5004
VITE_WS5_URL=http://localhost:5005

# PWA Configuration
VITE_APP_NAME="Tanvi Vanity AI"
VITE_APP_SHORT_NAME="Tanvi AI"
VITE_APP_DESCRIPTION="We girls have no time - AI-powered fashion styling"

# Development Configuration
VITE_DEBUG=true
VITE_LOG_LEVEL=debug
EOF
    
    cd ../../..
    print_success "Frontend setup complete"
else
    print_warning "Frontend directory not found"
fi

# 5. Create database initialization script
print_status "Creating database initialization..."

cat > bdt-automation/scripts/init-local-database.sh << 'EOF'
#!/bin/bash

# Initialize local databases for all workstreams
echo "🗄️ Initializing local databases..."

# Function to initialize database for a workstream
init_workstream_db() {
    local ws_name=$1
    local ws_path=$2
    
    echo "Initializing database for $ws_name..."
    
    if [ -d "$ws_path" ]; then
        cd "$ws_path"
        service_dir=$(find . -name "*_service" -type d | head -1)
        
        if [ -n "$service_dir" ]; then
            cd "$service_dir"
            
            # Activate virtual environment
            source venv/bin/activate
            
            # Initialize database
            python -c "
from src.main import app, db
with app.app_context():
    db.create_all()
    print('Database tables created for $ws_name')
"
            
            deactivate
            cd ../../..
        fi
    fi
}

# Initialize databases for all workstreams
init_workstream_db "WS1 User Management" "workstreams/ws1_user_management"
init_workstream_db "WS2 AI Styling Engine" "workstreams/ws2_ai_styling_engine"
init_workstream_db "WS3 Computer Vision" "workstreams/ws3_computer_vision_wardrobe"
init_workstream_db "WS4 Social Integration" "workstreams/ws4_social_integration"
init_workstream_db "WS5 E-commerce Integration" "workstreams/ws5_ecommerce_integration"

echo "✅ Database initialization complete"
EOF

chmod +x bdt-automation/scripts/init-local-database.sh

# 6. Create service startup script
print_status "Creating service startup scripts..."

cat > bdt-automation/scripts/start-all-services.sh << 'EOF'
#!/bin/bash

# Start all Tanvi Vanity AI services for local development
echo "🚀 Starting all Tanvi Vanity AI services..."

# Function to start a service
start_service() {
    local service_name=$1
    local service_path=$2
    local port=$3
    
    echo "Starting $service_name on port $port..."
    
    if [ -d "$service_path" ]; then
        cd "$service_path"
        service_dir=$(find . -name "*_service" -type d | head -1)
        
        if [ -n "$service_dir" ]; then
            cd "$service_dir"
            
            # Start service in background
            source venv/bin/activate
            nohup python src/main.py > "../../../logs/${service_name,,}.log" 2>&1 &
            echo $! > "../../../logs/${service_name,,}.pid"
            deactivate
            
            cd ../../..
            echo "✅ $service_name started (PID: $(cat logs/${service_name,,}.pid))"
        fi
    else
        echo "❌ Service path not found: $service_path"
    fi
}

# Create logs directory
mkdir -p logs

# Start backend services
start_service "WS1-UserManagement" "workstreams/ws1_user_management" 5001
sleep 2
start_service "WS2-AIStyling" "workstreams/ws2_ai_styling_engine" 5002
sleep 2
start_service "WS3-ComputerVision" "workstreams/ws3_computer_vision_wardrobe" 5003
sleep 2
start_service "WS4-SocialIntegration" "workstreams/ws4_social_integration" 5004
sleep 2
start_service "WS5-Ecommerce" "workstreams/ws5_ecommerce_integration" 5005
sleep 2

# Start frontend
echo "Starting Frontend (WS6-MobileApp) on port 3000..."
if [ -d "workstreams/ws6_mobile_app/tanvi_mobile_app" ]; then
    cd "workstreams/ws6_mobile_app/tanvi_mobile_app"
    nohup npm run dev > "../../../logs/frontend.log" 2>&1 &
    echo $! > "../../../logs/frontend.pid"
    cd ../../..
    echo "✅ Frontend started (PID: $(cat logs/frontend.pid))"
else
    echo "❌ Frontend path not found"
fi

echo ""
echo "🎉 All services started successfully!"
echo ""
echo "📱 Frontend (PWA): http://localhost:3000"
echo "🔐 WS1 User Management: http://localhost:5001"
echo "🤖 WS2 AI Styling: http://localhost:5002"
echo "👁️ WS3 Computer Vision: http://localhost:5003"
echo "👥 WS4 Social Integration: http://localhost:5004"
echo "🛒 WS5 E-commerce: http://localhost:5005"
echo ""
echo "📋 View logs: tail -f logs/*.log"
echo "🛑 Stop services: ./bdt-automation/scripts/stop-all-services.sh"
EOF

chmod +x bdt-automation/scripts/start-all-services.sh

# 7. Create service stop script
cat > bdt-automation/scripts/stop-all-services.sh << 'EOF'
#!/bin/bash

# Stop all Tanvi Vanity AI services
echo "🛑 Stopping all Tanvi Vanity AI services..."

# Function to stop a service
stop_service() {
    local service_name=$1
    local pid_file="logs/${service_name,,}.pid"
    
    if [ -f "$pid_file" ]; then
        local pid=$(cat "$pid_file")
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            echo "✅ Stopped $service_name (PID: $pid)"
        else
            echo "⚠️ $service_name was not running"
        fi
        rm -f "$pid_file"
    else
        echo "⚠️ No PID file found for $service_name"
    fi
}

# Stop all services
stop_service "WS1-UserManagement"
stop_service "WS2-AIStyling"
stop_service "WS3-ComputerVision"
stop_service "WS4-SocialIntegration"
stop_service "WS5-Ecommerce"
stop_service "Frontend"

# Kill any remaining processes on our ports
echo "🧹 Cleaning up any remaining processes..."
for port in 3000 5001 5002 5003 5004 5005; do
    pid=$(lsof -ti:$port 2>/dev/null)
    if [ -n "$pid" ]; then
        kill -9 $pid 2>/dev/null
        echo "✅ Killed process on port $port"
    fi
done

echo "🎉 All services stopped successfully!"
EOF

chmod +x bdt-automation/scripts/stop-all-services.sh

# 8. Create health check script
cat > bdt-automation/scripts/health-check.sh << 'EOF'
#!/bin/bash

# Health check for all Tanvi Vanity AI services
echo "🏥 Tanvi Vanity AI - Service Health Check"
echo "======================================="

# Function to check service health
check_service() {
    local service_name=$1
    local url=$2
    
    echo -n "Checking $service_name... "
    
    if curl -s -f "$url/health" > /dev/null 2>&1; then
        echo "✅ Healthy"
    else
        echo "❌ Unhealthy or not responding"
    fi
}

# Check all services
check_service "Frontend (PWA)" "http://localhost:3000"
check_service "WS1 User Management" "http://localhost:5001"
check_service "WS2 AI Styling" "http://localhost:5002"
check_service "WS3 Computer Vision" "http://localhost:5003"
check_service "WS4 Social Integration" "http://localhost:5004"
check_service "WS5 E-commerce" "http://localhost:5005"

echo ""
echo "📊 Service Status Summary:"
echo "========================="

# Check process status
for service in ws1-usermanagement ws2-aistyling ws3-computervision ws4-socialintegration ws5-ecommerce frontend; do
    pid_file="logs/${service}.pid"
    if [ -f "$pid_file" ]; then
        pid=$(cat "$pid_file")
        if kill -0 "$pid" 2>/dev/null; then
            echo "✅ $service: Running (PID: $pid)"
        else
            echo "❌ $service: Not running (stale PID file)"
        fi
    else
        echo "⚠️ $service: No PID file found"
    fi
done
EOF

chmod +x bdt-automation/scripts/health-check.sh

# 9. Final setup completion
print_status "Finalizing setup..."

# Initialize databases
./bdt-automation/scripts/init-local-database.sh

# Create quick start guide
cat > bdt-automation/docs/LOCAL_DEVELOPMENT_GUIDE.md << 'EOF'
# Tanvi Vanity AI - Local Development Guide

## Quick Start

### 1. Start All Services
```bash
./bdt-automation/scripts/start-all-services.sh
```

### 2. Access Applications
- **Frontend (PWA)**: http://localhost:3000
- **WS1 User Management**: http://localhost:5001
- **WS2 AI Styling**: http://localhost:5002
- **WS3 Computer Vision**: http://localhost:5003
- **WS4 Social Integration**: http://localhost:5004
- **WS5 E-commerce**: http://localhost:5005

### 3. Health Check
```bash
./bdt-automation/scripts/health-check.sh
```

### 4. Stop All Services
```bash
./bdt-automation/scripts/stop-all-services.sh
```

## Development Workflow

1. **Make Changes**: Edit code in any workstream
2. **Restart Service**: Stop and start specific service
3. **Test Changes**: Use health check and manual testing
4. **View Logs**: `tail -f logs/*.log`

## Troubleshooting

### Port Conflicts
If ports are in use, modify `.env.local` and restart services.

### Database Issues
Reinitialize databases:
```bash
./bdt-automation/scripts/init-local-database.sh
```

### Service Not Starting
Check logs in `logs/` directory for error details.
EOF

print_success "Local development environment setup complete! 🎉"
print_status ""
print_status "Next Steps:"
print_status "1. Start all services: ./bdt-automation/scripts/start-all-services.sh"
print_status "2. Open frontend: http://localhost:3000"
print_status "3. Check health: ./bdt-automation/scripts/health-check.sh"
print_status ""
print_status "📖 Documentation: bdt-automation/docs/LOCAL_DEVELOPMENT_GUIDE.md"
print_status "🔧 Configuration: .env.local"
print_status "📋 Logs: logs/*.log"

